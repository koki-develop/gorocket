// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockCommandProvider creates a new instance of MockCommandProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommandProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommandProvider {
	mock := &MockCommandProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommandProvider is an autogenerated mock type for the CommandProvider type
type MockCommandProvider struct {
	mock.Mock
}

type MockCommandProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommandProvider) EXPECT() *MockCommandProvider_Expecter {
	return &MockCommandProvider_Expecter{mock: &_m.Mock}
}

// BuildBinary provides a mock function for the type MockCommandProvider
func (_mock *MockCommandProvider) BuildBinary(moduleName string, version string, osName string, arch string) (string, error) {
	ret := _mock.Called(moduleName, version, osName, arch)

	if len(ret) == 0 {
		panic("no return value specified for BuildBinary")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) (string, error)); ok {
		return returnFunc(moduleName, version, osName, arch)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) string); ok {
		r0 = returnFunc(moduleName, version, osName, arch)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = returnFunc(moduleName, version, osName, arch)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommandProvider_BuildBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildBinary'
type MockCommandProvider_BuildBinary_Call struct {
	*mock.Call
}

// BuildBinary is a helper method to define mock.On call
//   - moduleName string
//   - version string
//   - osName string
//   - arch string
func (_e *MockCommandProvider_Expecter) BuildBinary(moduleName interface{}, version interface{}, osName interface{}, arch interface{}) *MockCommandProvider_BuildBinary_Call {
	return &MockCommandProvider_BuildBinary_Call{Call: _e.mock.On("BuildBinary", moduleName, version, osName, arch)}
}

func (_c *MockCommandProvider_BuildBinary_Call) Run(run func(moduleName string, version string, osName string, arch string)) *MockCommandProvider_BuildBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockCommandProvider_BuildBinary_Call) Return(s string, err error) *MockCommandProvider_BuildBinary_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCommandProvider_BuildBinary_Call) RunAndReturn(run func(moduleName string, version string, osName string, arch string) (string, error)) *MockCommandProvider_BuildBinary_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockCommandProvider
func (_mock *MockCommandProvider) Run(name string, args ...string) (string, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(name, args)
	} else {
		tmpRet = _mock.Called(name)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...string) (string, error)); ok {
		return returnFunc(name, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = returnFunc(name, args...)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = returnFunc(name, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommandProvider_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockCommandProvider_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - name string
//   - args ...string
func (_e *MockCommandProvider_Expecter) Run(name interface{}, args ...interface{}) *MockCommandProvider_Run_Call {
	return &MockCommandProvider_Run_Call{Call: _e.mock.On("Run",
		append([]interface{}{name}, args...)...)}
}

func (_c *MockCommandProvider_Run_Call) Run(run func(name string, args ...string)) *MockCommandProvider_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		var variadicArgs []string
		if len(args) > 1 {
			variadicArgs = args[1].([]string)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockCommandProvider_Run_Call) Return(s string, err error) *MockCommandProvider_Run_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCommandProvider_Run_Call) RunAndReturn(run func(name string, args ...string) (string, error)) *MockCommandProvider_Run_Call {
	_c.Call.Return(run)
	return _c
}

// RunWithEnv provides a mock function for the type MockCommandProvider
func (_mock *MockCommandProvider) RunWithEnv(name string, env []string, args ...string) error {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(name, env, args)
	} else {
		tmpRet = _mock.Called(name, env)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RunWithEnv")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []string, ...string) error); ok {
		r0 = returnFunc(name, env, args...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCommandProvider_RunWithEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunWithEnv'
type MockCommandProvider_RunWithEnv_Call struct {
	*mock.Call
}

// RunWithEnv is a helper method to define mock.On call
//   - name string
//   - env []string
//   - args ...string
func (_e *MockCommandProvider_Expecter) RunWithEnv(name interface{}, env interface{}, args ...interface{}) *MockCommandProvider_RunWithEnv_Call {
	return &MockCommandProvider_RunWithEnv_Call{Call: _e.mock.On("RunWithEnv",
		append([]interface{}{name, env}, args...)...)}
}

func (_c *MockCommandProvider_RunWithEnv_Call) Run(run func(name string, env []string, args ...string)) *MockCommandProvider_RunWithEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 []string
		var variadicArgs []string
		if len(args) > 2 {
			variadicArgs = args[2].([]string)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCommandProvider_RunWithEnv_Call) Return(err error) *MockCommandProvider_RunWithEnv_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCommandProvider_RunWithEnv_Call) RunAndReturn(run func(name string, env []string, args ...string) error) *MockCommandProvider_RunWithEnv_Call {
	_c.Call.Return(run)
	return _c
}
