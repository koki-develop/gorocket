// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"io"
	"os"

	mock "github.com/stretchr/testify/mock"
)

// NewMockFileSystemProvider creates a new instance of MockFileSystemProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileSystemProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileSystemProvider {
	mock := &MockFileSystemProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileSystemProvider is an autogenerated mock type for the FileSystemProvider type
type MockFileSystemProvider struct {
	mock.Mock
}

type MockFileSystemProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileSystemProvider) EXPECT() *MockFileSystemProvider_Expecter {
	return &MockFileSystemProvider_Expecter{mock: &_m.Mock}
}

// CalculateSHA256 provides a mock function for the type MockFileSystemProvider
func (_mock *MockFileSystemProvider) CalculateSHA256(r io.Reader) (string, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CalculateSHA256")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(io.Reader) (string, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(io.Reader) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystemProvider_CalculateSHA256_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateSHA256'
type MockFileSystemProvider_CalculateSHA256_Call struct {
	*mock.Call
}

// CalculateSHA256 is a helper method to define mock.On call
//   - r io.Reader
func (_e *MockFileSystemProvider_Expecter) CalculateSHA256(r interface{}) *MockFileSystemProvider_CalculateSHA256_Call {
	return &MockFileSystemProvider_CalculateSHA256_Call{Call: _e.mock.On("CalculateSHA256", r)}
}

func (_c *MockFileSystemProvider_CalculateSHA256_Call) Run(run func(r io.Reader)) *MockFileSystemProvider_CalculateSHA256_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.Reader
		if args[0] != nil {
			arg0 = args[0].(io.Reader)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystemProvider_CalculateSHA256_Call) Return(s string, err error) *MockFileSystemProvider_CalculateSHA256_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockFileSystemProvider_CalculateSHA256_Call) RunAndReturn(run func(r io.Reader) (string, error)) *MockFileSystemProvider_CalculateSHA256_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockFileSystemProvider
func (_mock *MockFileSystemProvider) Create(path string) (io.WriteCloser, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 io.WriteCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (io.WriteCloser, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) io.WriteCloser); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystemProvider_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFileSystemProvider_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystemProvider_Expecter) Create(path interface{}) *MockFileSystemProvider_Create_Call {
	return &MockFileSystemProvider_Create_Call{Call: _e.mock.On("Create", path)}
}

func (_c *MockFileSystemProvider_Create_Call) Run(run func(path string)) *MockFileSystemProvider_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystemProvider_Create_Call) Return(writeCloser io.WriteCloser, err error) *MockFileSystemProvider_Create_Call {
	_c.Call.Return(writeCloser, err)
	return _c
}

func (_c *MockFileSystemProvider_Create_Call) RunAndReturn(run func(path string) (io.WriteCloser, error)) *MockFileSystemProvider_Create_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureDistDir provides a mock function for the type MockFileSystemProvider
func (_mock *MockFileSystemProvider) EnsureDistDir(clean bool) error {
	ret := _mock.Called(clean)

	if len(ret) == 0 {
		panic("no return value specified for EnsureDistDir")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(bool) error); ok {
		r0 = returnFunc(clean)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystemProvider_EnsureDistDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureDistDir'
type MockFileSystemProvider_EnsureDistDir_Call struct {
	*mock.Call
}

// EnsureDistDir is a helper method to define mock.On call
//   - clean bool
func (_e *MockFileSystemProvider_Expecter) EnsureDistDir(clean interface{}) *MockFileSystemProvider_EnsureDistDir_Call {
	return &MockFileSystemProvider_EnsureDistDir_Call{Call: _e.mock.On("EnsureDistDir", clean)}
}

func (_c *MockFileSystemProvider_EnsureDistDir_Call) Run(run func(clean bool)) *MockFileSystemProvider_EnsureDistDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 bool
		if args[0] != nil {
			arg0 = args[0].(bool)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystemProvider_EnsureDistDir_Call) Return(err error) *MockFileSystemProvider_EnsureDistDir_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystemProvider_EnsureDistDir_Call) RunAndReturn(run func(clean bool) error) *MockFileSystemProvider_EnsureDistDir_Call {
	_c.Call.Return(run)
	return _c
}

// GetModuleName provides a mock function for the type MockFileSystemProvider
func (_mock *MockFileSystemProvider) GetModuleName() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetModuleName")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystemProvider_GetModuleName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModuleName'
type MockFileSystemProvider_GetModuleName_Call struct {
	*mock.Call
}

// GetModuleName is a helper method to define mock.On call
func (_e *MockFileSystemProvider_Expecter) GetModuleName() *MockFileSystemProvider_GetModuleName_Call {
	return &MockFileSystemProvider_GetModuleName_Call{Call: _e.mock.On("GetModuleName")}
}

func (_c *MockFileSystemProvider_GetModuleName_Call) Run(run func()) *MockFileSystemProvider_GetModuleName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFileSystemProvider_GetModuleName_Call) Return(s string, err error) *MockFileSystemProvider_GetModuleName_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockFileSystemProvider_GetModuleName_Call) RunAndReturn(run func() (string, error)) *MockFileSystemProvider_GetModuleName_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirAll provides a mock function for the type MockFileSystemProvider
func (_mock *MockFileSystemProvider) MkdirAll(path string, perm os.FileMode) error {
	ret := _mock.Called(path, perm)

	if len(ret) == 0 {
		panic("no return value specified for MkdirAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, os.FileMode) error); ok {
		r0 = returnFunc(path, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystemProvider_MkdirAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirAll'
type MockFileSystemProvider_MkdirAll_Call struct {
	*mock.Call
}

// MkdirAll is a helper method to define mock.On call
//   - path string
//   - perm os.FileMode
func (_e *MockFileSystemProvider_Expecter) MkdirAll(path interface{}, perm interface{}) *MockFileSystemProvider_MkdirAll_Call {
	return &MockFileSystemProvider_MkdirAll_Call{Call: _e.mock.On("MkdirAll", path, perm)}
}

func (_c *MockFileSystemProvider_MkdirAll_Call) Run(run func(path string, perm os.FileMode)) *MockFileSystemProvider_MkdirAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 os.FileMode
		if args[1] != nil {
			arg1 = args[1].(os.FileMode)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileSystemProvider_MkdirAll_Call) Return(err error) *MockFileSystemProvider_MkdirAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystemProvider_MkdirAll_Call) RunAndReturn(run func(path string, perm os.FileMode) error) *MockFileSystemProvider_MkdirAll_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function for the type MockFileSystemProvider
func (_mock *MockFileSystemProvider) Open(path string) (io.ReadCloser, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (io.ReadCloser, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) io.ReadCloser); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystemProvider_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockFileSystemProvider_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystemProvider_Expecter) Open(path interface{}) *MockFileSystemProvider_Open_Call {
	return &MockFileSystemProvider_Open_Call{Call: _e.mock.On("Open", path)}
}

func (_c *MockFileSystemProvider_Open_Call) Run(run func(path string)) *MockFileSystemProvider_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystemProvider_Open_Call) Return(readCloser io.ReadCloser, err error) *MockFileSystemProvider_Open_Call {
	_c.Call.Return(readCloser, err)
	return _c
}

func (_c *MockFileSystemProvider_Open_Call) RunAndReturn(run func(path string) (io.ReadCloser, error)) *MockFileSystemProvider_Open_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function for the type MockFileSystemProvider
func (_mock *MockFileSystemProvider) ReadFile(path string) ([]byte, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystemProvider_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type MockFileSystemProvider_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystemProvider_Expecter) ReadFile(path interface{}) *MockFileSystemProvider_ReadFile_Call {
	return &MockFileSystemProvider_ReadFile_Call{Call: _e.mock.On("ReadFile", path)}
}

func (_c *MockFileSystemProvider_ReadFile_Call) Run(run func(path string)) *MockFileSystemProvider_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystemProvider_ReadFile_Call) Return(bytes []byte, err error) *MockFileSystemProvider_ReadFile_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockFileSystemProvider_ReadFile_Call) RunAndReturn(run func(path string) ([]byte, error)) *MockFileSystemProvider_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type MockFileSystemProvider
func (_mock *MockFileSystemProvider) Remove(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystemProvider_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockFileSystemProvider_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystemProvider_Expecter) Remove(path interface{}) *MockFileSystemProvider_Remove_Call {
	return &MockFileSystemProvider_Remove_Call{Call: _e.mock.On("Remove", path)}
}

func (_c *MockFileSystemProvider_Remove_Call) Run(run func(path string)) *MockFileSystemProvider_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystemProvider_Remove_Call) Return(err error) *MockFileSystemProvider_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystemProvider_Remove_Call) RunAndReturn(run func(path string) error) *MockFileSystemProvider_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAll provides a mock function for the type MockFileSystemProvider
func (_mock *MockFileSystemProvider) RemoveAll(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystemProvider_RemoveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAll'
type MockFileSystemProvider_RemoveAll_Call struct {
	*mock.Call
}

// RemoveAll is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystemProvider_Expecter) RemoveAll(path interface{}) *MockFileSystemProvider_RemoveAll_Call {
	return &MockFileSystemProvider_RemoveAll_Call{Call: _e.mock.On("RemoveAll", path)}
}

func (_c *MockFileSystemProvider_RemoveAll_Call) Run(run func(path string)) *MockFileSystemProvider_RemoveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystemProvider_RemoveAll_Call) Return(err error) *MockFileSystemProvider_RemoveAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystemProvider_RemoveAll_Call) RunAndReturn(run func(path string) error) *MockFileSystemProvider_RemoveAll_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function for the type MockFileSystemProvider
func (_mock *MockFileSystemProvider) Stat(path string) (os.FileInfo, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 os.FileInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (os.FileInfo, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) os.FileInfo); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(os.FileInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystemProvider_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type MockFileSystemProvider_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystemProvider_Expecter) Stat(path interface{}) *MockFileSystemProvider_Stat_Call {
	return &MockFileSystemProvider_Stat_Call{Call: _e.mock.On("Stat", path)}
}

func (_c *MockFileSystemProvider_Stat_Call) Run(run func(path string)) *MockFileSystemProvider_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystemProvider_Stat_Call) Return(v os.FileInfo, err error) *MockFileSystemProvider_Stat_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockFileSystemProvider_Stat_Call) RunAndReturn(run func(path string) (os.FileInfo, error)) *MockFileSystemProvider_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function for the type MockFileSystemProvider
func (_mock *MockFileSystemProvider) WriteFile(path string, data []byte, perm os.FileMode) error {
	ret := _mock.Called(path, data, perm)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte, os.FileMode) error); ok {
		r0 = returnFunc(path, data, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystemProvider_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type MockFileSystemProvider_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - path string
//   - data []byte
//   - perm os.FileMode
func (_e *MockFileSystemProvider_Expecter) WriteFile(path interface{}, data interface{}, perm interface{}) *MockFileSystemProvider_WriteFile_Call {
	return &MockFileSystemProvider_WriteFile_Call{Call: _e.mock.On("WriteFile", path, data, perm)}
}

func (_c *MockFileSystemProvider_WriteFile_Call) Run(run func(path string, data []byte, perm os.FileMode)) *MockFileSystemProvider_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 os.FileMode
		if args[2] != nil {
			arg2 = args[2].(os.FileMode)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileSystemProvider_WriteFile_Call) Return(err error) *MockFileSystemProvider_WriteFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystemProvider_WriteFile_Call) RunAndReturn(run func(path string, data []byte, perm os.FileMode) error) *MockFileSystemProvider_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}
