// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/google/go-github/v50/github"
	"github.com/koki-develop/gorocket/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGitHubProvider creates a new instance of MockGitHubProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitHubProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitHubProvider {
	mock := &MockGitHubProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGitHubProvider is an autogenerated mock type for the GitHubProvider type
type MockGitHubProvider struct {
	mock.Mock
}

type MockGitHubProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitHubProvider) EXPECT() *MockGitHubProvider_Expecter {
	return &MockGitHubProvider_Expecter{mock: &_m.Mock}
}

// CreateRelease provides a mock function for the type MockGitHubProvider
func (_mock *MockGitHubProvider) CreateRelease(ctx context.Context, repo *models.GitHubRepository, tagName string) (*github.RepositoryRelease, error) {
	ret := _mock.Called(ctx, repo, tagName)

	if len(ret) == 0 {
		panic("no return value specified for CreateRelease")
	}

	var r0 *github.RepositoryRelease
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.GitHubRepository, string) (*github.RepositoryRelease, error)); ok {
		return returnFunc(ctx, repo, tagName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.GitHubRepository, string) *github.RepositoryRelease); ok {
		r0 = returnFunc(ctx, repo, tagName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.GitHubRepository, string) error); ok {
		r1 = returnFunc(ctx, repo, tagName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGitHubProvider_CreateRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRelease'
type MockGitHubProvider_CreateRelease_Call struct {
	*mock.Call
}

// CreateRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - repo *models.GitHubRepository
//   - tagName string
func (_e *MockGitHubProvider_Expecter) CreateRelease(ctx interface{}, repo interface{}, tagName interface{}) *MockGitHubProvider_CreateRelease_Call {
	return &MockGitHubProvider_CreateRelease_Call{Call: _e.mock.On("CreateRelease", ctx, repo, tagName)}
}

func (_c *MockGitHubProvider_CreateRelease_Call) Run(run func(ctx context.Context, repo *models.GitHubRepository, tagName string)) *MockGitHubProvider_CreateRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.GitHubRepository
		if args[1] != nil {
			arg1 = args[1].(*models.GitHubRepository)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGitHubProvider_CreateRelease_Call) Return(repositoryRelease *github.RepositoryRelease, err error) *MockGitHubProvider_CreateRelease_Call {
	_c.Call.Return(repositoryRelease, err)
	return _c
}

func (_c *MockGitHubProvider_CreateRelease_Call) RunAndReturn(run func(ctx context.Context, repo *models.GitHubRepository, tagName string) (*github.RepositoryRelease, error)) *MockGitHubProvider_CreateRelease_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseExists provides a mock function for the type MockGitHubProvider
func (_mock *MockGitHubProvider) ReleaseExists(ctx context.Context, repo *models.GitHubRepository, tagName string) (bool, error) {
	ret := _mock.Called(ctx, repo, tagName)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.GitHubRepository, string) (bool, error)); ok {
		return returnFunc(ctx, repo, tagName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.GitHubRepository, string) bool); ok {
		r0 = returnFunc(ctx, repo, tagName)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.GitHubRepository, string) error); ok {
		r1 = returnFunc(ctx, repo, tagName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGitHubProvider_ReleaseExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseExists'
type MockGitHubProvider_ReleaseExists_Call struct {
	*mock.Call
}

// ReleaseExists is a helper method to define mock.On call
//   - ctx context.Context
//   - repo *models.GitHubRepository
//   - tagName string
func (_e *MockGitHubProvider_Expecter) ReleaseExists(ctx interface{}, repo interface{}, tagName interface{}) *MockGitHubProvider_ReleaseExists_Call {
	return &MockGitHubProvider_ReleaseExists_Call{Call: _e.mock.On("ReleaseExists", ctx, repo, tagName)}
}

func (_c *MockGitHubProvider_ReleaseExists_Call) Run(run func(ctx context.Context, repo *models.GitHubRepository, tagName string)) *MockGitHubProvider_ReleaseExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.GitHubRepository
		if args[1] != nil {
			arg1 = args[1].(*models.GitHubRepository)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGitHubProvider_ReleaseExists_Call) Return(b bool, err error) *MockGitHubProvider_ReleaseExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockGitHubProvider_ReleaseExists_Call) RunAndReturn(run func(ctx context.Context, repo *models.GitHubRepository, tagName string) (bool, error)) *MockGitHubProvider_ReleaseExists_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTapRepository provides a mock function for the type MockGitHubProvider
func (_mock *MockGitHubProvider) UpdateTapRepository(ctx context.Context, tapRepo *models.Repository, formula string, moduleName string, version string) error {
	ret := _mock.Called(ctx, tapRepo, formula, moduleName, version)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTapRepository")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Repository, string, string, string) error); ok {
		r0 = returnFunc(ctx, tapRepo, formula, moduleName, version)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGitHubProvider_UpdateTapRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTapRepository'
type MockGitHubProvider_UpdateTapRepository_Call struct {
	*mock.Call
}

// UpdateTapRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - tapRepo *models.Repository
//   - formula string
//   - moduleName string
//   - version string
func (_e *MockGitHubProvider_Expecter) UpdateTapRepository(ctx interface{}, tapRepo interface{}, formula interface{}, moduleName interface{}, version interface{}) *MockGitHubProvider_UpdateTapRepository_Call {
	return &MockGitHubProvider_UpdateTapRepository_Call{Call: _e.mock.On("UpdateTapRepository", ctx, tapRepo, formula, moduleName, version)}
}

func (_c *MockGitHubProvider_UpdateTapRepository_Call) Run(run func(ctx context.Context, tapRepo *models.Repository, formula string, moduleName string, version string)) *MockGitHubProvider_UpdateTapRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.Repository
		if args[1] != nil {
			arg1 = args[1].(*models.Repository)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockGitHubProvider_UpdateTapRepository_Call) Return(err error) *MockGitHubProvider_UpdateTapRepository_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGitHubProvider_UpdateTapRepository_Call) RunAndReturn(run func(ctx context.Context, tapRepo *models.Repository, formula string, moduleName string, version string) error) *MockGitHubProvider_UpdateTapRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UploadAssets provides a mock function for the type MockGitHubProvider
func (_mock *MockGitHubProvider) UploadAssets(ctx context.Context, repo *models.GitHubRepository, release *github.RepositoryRelease, assets []models.ReleaseAsset) error {
	ret := _mock.Called(ctx, repo, release, assets)

	if len(ret) == 0 {
		panic("no return value specified for UploadAssets")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.GitHubRepository, *github.RepositoryRelease, []models.ReleaseAsset) error); ok {
		r0 = returnFunc(ctx, repo, release, assets)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGitHubProvider_UploadAssets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadAssets'
type MockGitHubProvider_UploadAssets_Call struct {
	*mock.Call
}

// UploadAssets is a helper method to define mock.On call
//   - ctx context.Context
//   - repo *models.GitHubRepository
//   - release *github.RepositoryRelease
//   - assets []models.ReleaseAsset
func (_e *MockGitHubProvider_Expecter) UploadAssets(ctx interface{}, repo interface{}, release interface{}, assets interface{}) *MockGitHubProvider_UploadAssets_Call {
	return &MockGitHubProvider_UploadAssets_Call{Call: _e.mock.On("UploadAssets", ctx, repo, release, assets)}
}

func (_c *MockGitHubProvider_UploadAssets_Call) Run(run func(ctx context.Context, repo *models.GitHubRepository, release *github.RepositoryRelease, assets []models.ReleaseAsset)) *MockGitHubProvider_UploadAssets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.GitHubRepository
		if args[1] != nil {
			arg1 = args[1].(*models.GitHubRepository)
		}
		var arg2 *github.RepositoryRelease
		if args[2] != nil {
			arg2 = args[2].(*github.RepositoryRelease)
		}
		var arg3 []models.ReleaseAsset
		if args[3] != nil {
			arg3 = args[3].([]models.ReleaseAsset)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockGitHubProvider_UploadAssets_Call) Return(err error) *MockGitHubProvider_UploadAssets_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGitHubProvider_UploadAssets_Call) RunAndReturn(run func(ctx context.Context, repo *models.GitHubRepository, release *github.RepositoryRelease, assets []models.ReleaseAsset) error) *MockGitHubProvider_UploadAssets_Call {
	_c.Call.Return(run)
	return _c
}
