// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/koki-develop/gorocket/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGitProvider creates a new instance of MockGitProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitProvider {
	mock := &MockGitProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGitProvider is an autogenerated mock type for the GitProvider type
type MockGitProvider struct {
	mock.Mock
}

type MockGitProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitProvider) EXPECT() *MockGitProvider_Expecter {
	return &MockGitProvider_Expecter{mock: &_m.Mock}
}

// GetCurrentVersion provides a mock function for the type MockGitProvider
func (_mock *MockGitProvider) GetCurrentVersion() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentVersion")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGitProvider_GetCurrentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentVersion'
type MockGitProvider_GetCurrentVersion_Call struct {
	*mock.Call
}

// GetCurrentVersion is a helper method to define mock.On call
func (_e *MockGitProvider_Expecter) GetCurrentVersion() *MockGitProvider_GetCurrentVersion_Call {
	return &MockGitProvider_GetCurrentVersion_Call{Call: _e.mock.On("GetCurrentVersion")}
}

func (_c *MockGitProvider_GetCurrentVersion_Call) Run(run func()) *MockGitProvider_GetCurrentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGitProvider_GetCurrentVersion_Call) Return(s string, err error) *MockGitProvider_GetCurrentVersion_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockGitProvider_GetCurrentVersion_Call) RunAndReturn(run func() (string, error)) *MockGitProvider_GetCurrentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetGitHubRepository provides a mock function for the type MockGitProvider
func (_mock *MockGitProvider) GetGitHubRepository() (*models.GitHubRepository, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGitHubRepository")
	}

	var r0 *models.GitHubRepository
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*models.GitHubRepository, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *models.GitHubRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GitHubRepository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGitProvider_GetGitHubRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGitHubRepository'
type MockGitProvider_GetGitHubRepository_Call struct {
	*mock.Call
}

// GetGitHubRepository is a helper method to define mock.On call
func (_e *MockGitProvider_Expecter) GetGitHubRepository() *MockGitProvider_GetGitHubRepository_Call {
	return &MockGitProvider_GetGitHubRepository_Call{Call: _e.mock.On("GetGitHubRepository")}
}

func (_c *MockGitProvider_GetGitHubRepository_Call) Run(run func()) *MockGitProvider_GetGitHubRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGitProvider_GetGitHubRepository_Call) Return(gitHubRepository *models.GitHubRepository, err error) *MockGitProvider_GetGitHubRepository_Call {
	_c.Call.Return(gitHubRepository, err)
	return _c
}

func (_c *MockGitProvider_GetGitHubRepository_Call) RunAndReturn(run func() (*models.GitHubRepository, error)) *MockGitProvider_GetGitHubRepository_Call {
	_c.Call.Return(run)
	return _c
}
