// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/koki-develop/gorocket/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockArchiverService creates a new instance of MockArchiverService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArchiverService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArchiverService {
	mock := &MockArchiverService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockArchiverService is an autogenerated mock type for the ArchiverService type
type MockArchiverService struct {
	mock.Mock
}

type MockArchiverService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArchiverService) EXPECT() *MockArchiverService_Expecter {
	return &MockArchiverService_Expecter{mock: &_m.Mock}
}

// CreateArchive provides a mock function for the type MockArchiverService
func (_mock *MockArchiverService) CreateArchive(buildInfo *models.BuildInfo, buildResult models.BuildResult) models.ArchiveResult {
	ret := _mock.Called(buildInfo, buildResult)

	if len(ret) == 0 {
		panic("no return value specified for CreateArchive")
	}

	var r0 models.ArchiveResult
	if returnFunc, ok := ret.Get(0).(func(*models.BuildInfo, models.BuildResult) models.ArchiveResult); ok {
		r0 = returnFunc(buildInfo, buildResult)
	} else {
		r0 = ret.Get(0).(models.ArchiveResult)
	}
	return r0
}

// MockArchiverService_CreateArchive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateArchive'
type MockArchiverService_CreateArchive_Call struct {
	*mock.Call
}

// CreateArchive is a helper method to define mock.On call
//   - buildInfo *models.BuildInfo
//   - buildResult models.BuildResult
func (_e *MockArchiverService_Expecter) CreateArchive(buildInfo interface{}, buildResult interface{}) *MockArchiverService_CreateArchive_Call {
	return &MockArchiverService_CreateArchive_Call{Call: _e.mock.On("CreateArchive", buildInfo, buildResult)}
}

func (_c *MockArchiverService_CreateArchive_Call) Run(run func(buildInfo *models.BuildInfo, buildResult models.BuildResult)) *MockArchiverService_CreateArchive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.BuildInfo
		if args[0] != nil {
			arg0 = args[0].(*models.BuildInfo)
		}
		var arg1 models.BuildResult
		if args[1] != nil {
			arg1 = args[1].(models.BuildResult)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArchiverService_CreateArchive_Call) Return(archiveResult models.ArchiveResult) *MockArchiverService_CreateArchive_Call {
	_c.Call.Return(archiveResult)
	return _c
}

func (_c *MockArchiverService_CreateArchive_Call) RunAndReturn(run func(buildInfo *models.BuildInfo, buildResult models.BuildResult) models.ArchiveResult) *MockArchiverService_CreateArchive_Call {
	_c.Call.Return(run)
	return _c
}

// CreateArchives provides a mock function for the type MockArchiverService
func (_mock *MockArchiverService) CreateArchives(buildInfo *models.BuildInfo, buildResults []models.BuildResult) ([]models.ArchiveResult, error) {
	ret := _mock.Called(buildInfo, buildResults)

	if len(ret) == 0 {
		panic("no return value specified for CreateArchives")
	}

	var r0 []models.ArchiveResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*models.BuildInfo, []models.BuildResult) ([]models.ArchiveResult, error)); ok {
		return returnFunc(buildInfo, buildResults)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.BuildInfo, []models.BuildResult) []models.ArchiveResult); ok {
		r0 = returnFunc(buildInfo, buildResults)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ArchiveResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.BuildInfo, []models.BuildResult) error); ok {
		r1 = returnFunc(buildInfo, buildResults)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockArchiverService_CreateArchives_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateArchives'
type MockArchiverService_CreateArchives_Call struct {
	*mock.Call
}

// CreateArchives is a helper method to define mock.On call
//   - buildInfo *models.BuildInfo
//   - buildResults []models.BuildResult
func (_e *MockArchiverService_Expecter) CreateArchives(buildInfo interface{}, buildResults interface{}) *MockArchiverService_CreateArchives_Call {
	return &MockArchiverService_CreateArchives_Call{Call: _e.mock.On("CreateArchives", buildInfo, buildResults)}
}

func (_c *MockArchiverService_CreateArchives_Call) Run(run func(buildInfo *models.BuildInfo, buildResults []models.BuildResult)) *MockArchiverService_CreateArchives_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.BuildInfo
		if args[0] != nil {
			arg0 = args[0].(*models.BuildInfo)
		}
		var arg1 []models.BuildResult
		if args[1] != nil {
			arg1 = args[1].([]models.BuildResult)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArchiverService_CreateArchives_Call) Return(archiveResults []models.ArchiveResult, err error) *MockArchiverService_CreateArchives_Call {
	_c.Call.Return(archiveResults, err)
	return _c
}

func (_c *MockArchiverService_CreateArchives_Call) RunAndReturn(run func(buildInfo *models.BuildInfo, buildResults []models.BuildResult) ([]models.ArchiveResult, error)) *MockArchiverService_CreateArchives_Call {
	_c.Call.Return(run)
	return _c
}
