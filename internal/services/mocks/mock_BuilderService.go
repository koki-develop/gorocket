// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/koki-develop/gorocket/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBuilderService creates a new instance of MockBuilderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBuilderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBuilderService {
	mock := &MockBuilderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBuilderService is an autogenerated mock type for the BuilderService type
type MockBuilderService struct {
	mock.Mock
}

type MockBuilderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBuilderService) EXPECT() *MockBuilderService_Expecter {
	return &MockBuilderService_Expecter{mock: &_m.Mock}
}

// BuildTargets provides a mock function for the type MockBuilderService
func (_mock *MockBuilderService) BuildTargets(buildInfo *models.BuildInfo, buildConfig models.BuildConfig) ([]models.BuildResult, error) {
	ret := _mock.Called(buildInfo, buildConfig)

	if len(ret) == 0 {
		panic("no return value specified for BuildTargets")
	}

	var r0 []models.BuildResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*models.BuildInfo, models.BuildConfig) ([]models.BuildResult, error)); ok {
		return returnFunc(buildInfo, buildConfig)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.BuildInfo, models.BuildConfig) []models.BuildResult); ok {
		r0 = returnFunc(buildInfo, buildConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BuildResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.BuildInfo, models.BuildConfig) error); ok {
		r1 = returnFunc(buildInfo, buildConfig)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBuilderService_BuildTargets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildTargets'
type MockBuilderService_BuildTargets_Call struct {
	*mock.Call
}

// BuildTargets is a helper method to define mock.On call
//   - buildInfo *models.BuildInfo
//   - buildConfig models.BuildConfig
func (_e *MockBuilderService_Expecter) BuildTargets(buildInfo interface{}, buildConfig interface{}) *MockBuilderService_BuildTargets_Call {
	return &MockBuilderService_BuildTargets_Call{Call: _e.mock.On("BuildTargets", buildInfo, buildConfig)}
}

func (_c *MockBuilderService_BuildTargets_Call) Run(run func(buildInfo *models.BuildInfo, buildConfig models.BuildConfig)) *MockBuilderService_BuildTargets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.BuildInfo
		if args[0] != nil {
			arg0 = args[0].(*models.BuildInfo)
		}
		var arg1 models.BuildConfig
		if args[1] != nil {
			arg1 = args[1].(models.BuildConfig)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBuilderService_BuildTargets_Call) Return(buildResults []models.BuildResult, err error) *MockBuilderService_BuildTargets_Call {
	_c.Call.Return(buildResults, err)
	return _c
}

func (_c *MockBuilderService_BuildTargets_Call) RunAndReturn(run func(buildInfo *models.BuildInfo, buildConfig models.BuildConfig) ([]models.BuildResult, error)) *MockBuilderService_BuildTargets_Call {
	_c.Call.Return(run)
	return _c
}
