// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/koki-develop/gorocket/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConfigService creates a new instance of MockConfigService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigService {
	mock := &MockConfigService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigService is an autogenerated mock type for the ConfigService type
type MockConfigService struct {
	mock.Mock
}

type MockConfigService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigService) EXPECT() *MockConfigService_Expecter {
	return &MockConfigService_Expecter{mock: &_m.Mock}
}

// ConfigExists provides a mock function for the type MockConfigService
func (_mock *MockConfigService) ConfigExists() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfigExists")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConfigService_ConfigExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigExists'
type MockConfigService_ConfigExists_Call struct {
	*mock.Call
}

// ConfigExists is a helper method to define mock.On call
func (_e *MockConfigService_Expecter) ConfigExists() *MockConfigService_ConfigExists_Call {
	return &MockConfigService_ConfigExists_Call{Call: _e.mock.On("ConfigExists")}
}

func (_c *MockConfigService_ConfigExists_Call) Run(run func()) *MockConfigService_ConfigExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigService_ConfigExists_Call) Return(b bool) *MockConfigService_ConfigExists_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConfigService_ConfigExists_Call) RunAndReturn(run func() bool) *MockConfigService_ConfigExists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDefaultConfig provides a mock function for the type MockConfigService
func (_mock *MockConfigService) CreateDefaultConfig() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateDefaultConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigService_CreateDefaultConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDefaultConfig'
type MockConfigService_CreateDefaultConfig_Call struct {
	*mock.Call
}

// CreateDefaultConfig is a helper method to define mock.On call
func (_e *MockConfigService_Expecter) CreateDefaultConfig() *MockConfigService_CreateDefaultConfig_Call {
	return &MockConfigService_CreateDefaultConfig_Call{Call: _e.mock.On("CreateDefaultConfig")}
}

func (_c *MockConfigService_CreateDefaultConfig_Call) Run(run func()) *MockConfigService_CreateDefaultConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigService_CreateDefaultConfig_Call) Return(err error) *MockConfigService_CreateDefaultConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigService_CreateDefaultConfig_Call) RunAndReturn(run func() error) *MockConfigService_CreateDefaultConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultConfigData provides a mock function for the type MockConfigService
func (_mock *MockConfigService) GetDefaultConfigData() []byte {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultConfigData")
	}

	var r0 []byte
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	return r0
}

// MockConfigService_GetDefaultConfigData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultConfigData'
type MockConfigService_GetDefaultConfigData_Call struct {
	*mock.Call
}

// GetDefaultConfigData is a helper method to define mock.On call
func (_e *MockConfigService_Expecter) GetDefaultConfigData() *MockConfigService_GetDefaultConfigData_Call {
	return &MockConfigService_GetDefaultConfigData_Call{Call: _e.mock.On("GetDefaultConfigData")}
}

func (_c *MockConfigService_GetDefaultConfigData_Call) Run(run func()) *MockConfigService_GetDefaultConfigData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigService_GetDefaultConfigData_Call) Return(bytes []byte) *MockConfigService_GetDefaultConfigData_Call {
	_c.Call.Return(bytes)
	return _c
}

func (_c *MockConfigService_GetDefaultConfigData_Call) RunAndReturn(run func() []byte) *MockConfigService_GetDefaultConfigData_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfig provides a mock function for the type MockConfigService
func (_mock *MockConfigService) LoadConfig() (*models.Config, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadConfig")
	}

	var r0 *models.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*models.Config, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *models.Config); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigService_LoadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfig'
type MockConfigService_LoadConfig_Call struct {
	*mock.Call
}

// LoadConfig is a helper method to define mock.On call
func (_e *MockConfigService_Expecter) LoadConfig() *MockConfigService_LoadConfig_Call {
	return &MockConfigService_LoadConfig_Call{Call: _e.mock.On("LoadConfig")}
}

func (_c *MockConfigService_LoadConfig_Call) Run(run func()) *MockConfigService_LoadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigService_LoadConfig_Call) Return(config *models.Config, err error) *MockConfigService_LoadConfig_Call {
	_c.Call.Return(config, err)
	return _c
}

func (_c *MockConfigService_LoadConfig_Call) RunAndReturn(run func() (*models.Config, error)) *MockConfigService_LoadConfig_Call {
	_c.Call.Return(run)
	return _c
}
