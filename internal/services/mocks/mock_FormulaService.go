// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/koki-develop/gorocket/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFormulaService creates a new instance of MockFormulaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFormulaService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFormulaService {
	mock := &MockFormulaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFormulaService is an autogenerated mock type for the FormulaService type
type MockFormulaService struct {
	mock.Mock
}

type MockFormulaService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFormulaService) EXPECT() *MockFormulaService_Expecter {
	return &MockFormulaService_Expecter{mock: &_m.Mock}
}

// GenerateFormula provides a mock function for the type MockFormulaService
func (_mock *MockFormulaService) GenerateFormula(buildInfo models.BuildInfo, archiveResults []models.ArchiveResult, brewConfig models.BrewConfig) error {
	ret := _mock.Called(buildInfo, archiveResults, brewConfig)

	if len(ret) == 0 {
		panic("no return value specified for GenerateFormula")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.BuildInfo, []models.ArchiveResult, models.BrewConfig) error); ok {
		r0 = returnFunc(buildInfo, archiveResults, brewConfig)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFormulaService_GenerateFormula_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateFormula'
type MockFormulaService_GenerateFormula_Call struct {
	*mock.Call
}

// GenerateFormula is a helper method to define mock.On call
//   - buildInfo models.BuildInfo
//   - archiveResults []models.ArchiveResult
//   - brewConfig models.BrewConfig
func (_e *MockFormulaService_Expecter) GenerateFormula(buildInfo interface{}, archiveResults interface{}, brewConfig interface{}) *MockFormulaService_GenerateFormula_Call {
	return &MockFormulaService_GenerateFormula_Call{Call: _e.mock.On("GenerateFormula", buildInfo, archiveResults, brewConfig)}
}

func (_c *MockFormulaService_GenerateFormula_Call) Run(run func(buildInfo models.BuildInfo, archiveResults []models.ArchiveResult, brewConfig models.BrewConfig)) *MockFormulaService_GenerateFormula_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.BuildInfo
		if args[0] != nil {
			arg0 = args[0].(models.BuildInfo)
		}
		var arg1 []models.ArchiveResult
		if args[1] != nil {
			arg1 = args[1].([]models.ArchiveResult)
		}
		var arg2 models.BrewConfig
		if args[2] != nil {
			arg2 = args[2].(models.BrewConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFormulaService_GenerateFormula_Call) Return(err error) *MockFormulaService_GenerateFormula_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFormulaService_GenerateFormula_Call) RunAndReturn(run func(buildInfo models.BuildInfo, archiveResults []models.ArchiveResult, brewConfig models.BrewConfig) error) *MockFormulaService_GenerateFormula_Call {
	_c.Call.Return(run)
	return _c
}
