// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/koki-develop/gorocket/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockVersionService creates a new instance of MockVersionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVersionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVersionService {
	mock := &MockVersionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVersionService is an autogenerated mock type for the VersionService type
type MockVersionService struct {
	mock.Mock
}

type MockVersionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVersionService) EXPECT() *MockVersionService_Expecter {
	return &MockVersionService_Expecter{mock: &_m.Mock}
}

// GetBuildInfo provides a mock function for the type MockVersionService
func (_mock *MockVersionService) GetBuildInfo() (*models.BuildInfo, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBuildInfo")
	}

	var r0 *models.BuildInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*models.BuildInfo, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *models.BuildInfo); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BuildInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVersionService_GetBuildInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBuildInfo'
type MockVersionService_GetBuildInfo_Call struct {
	*mock.Call
}

// GetBuildInfo is a helper method to define mock.On call
func (_e *MockVersionService_Expecter) GetBuildInfo() *MockVersionService_GetBuildInfo_Call {
	return &MockVersionService_GetBuildInfo_Call{Call: _e.mock.On("GetBuildInfo")}
}

func (_c *MockVersionService_GetBuildInfo_Call) Run(run func()) *MockVersionService_GetBuildInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVersionService_GetBuildInfo_Call) Return(buildInfo *models.BuildInfo, err error) *MockVersionService_GetBuildInfo_Call {
	_c.Call.Return(buildInfo, err)
	return _c
}

func (_c *MockVersionService_GetBuildInfo_Call) RunAndReturn(run func() (*models.BuildInfo, error)) *MockVersionService_GetBuildInfo_Call {
	_c.Call.Return(run)
	return _c
}
